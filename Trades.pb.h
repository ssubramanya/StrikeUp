// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Trades.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Trades_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Trades_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Trades_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Trades_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Trades_2eproto;
class Trade;
class TradeDefaultTypeInternal;
extern TradeDefaultTypeInternal _Trade_default_instance_;
class TradeInfo;
class TradeInfoDefaultTypeInternal;
extern TradeInfoDefaultTypeInternal _TradeInfo_default_instance_;
class Trades;
class TradesDefaultTypeInternal;
extern TradesDefaultTypeInternal _Trades_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::Trade* Arena::CreateMaybeMessage<::Trade>(Arena*);
template<> ::TradeInfo* Arena::CreateMaybeMessage<::TradeInfo>(Arena*);
template<> ::Trades* Arena::CreateMaybeMessage<::Trades>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class TradeInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TradeInfo) */ {
 public:
  TradeInfo();
  virtual ~TradeInfo();

  TradeInfo(const TradeInfo& from);
  TradeInfo(TradeInfo&& from) noexcept
    : TradeInfo() {
    *this = ::std::move(from);
  }

  inline TradeInfo& operator=(const TradeInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline TradeInfo& operator=(TradeInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TradeInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TradeInfo* internal_default_instance() {
    return reinterpret_cast<const TradeInfo*>(
               &_TradeInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TradeInfo& a, TradeInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(TradeInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TradeInfo* New() const final {
    return CreateMaybeMessage<TradeInfo>(nullptr);
  }

  TradeInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TradeInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TradeInfo& from);
  void MergeFrom(const TradeInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TradeInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TradeInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Trades_2eproto);
    return ::descriptor_table_Trades_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPriceFieldNumber = 1,
    kQuantityFieldNumber = 2,
    kOrderIdFieldNumber = 3,
  };
  // double price = 1;
  void clear_price();
  double price() const;
  void set_price(double value);
  private:
  double _internal_price() const;
  void _internal_set_price(double value);
  public:

  // uint64 quantity = 2;
  void clear_quantity();
  ::PROTOBUF_NAMESPACE_ID::uint64 quantity() const;
  void set_quantity(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_quantity() const;
  void _internal_set_quantity(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 orderId = 3;
  void clear_orderid();
  ::PROTOBUF_NAMESPACE_ID::uint64 orderid() const;
  void set_orderid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_orderid() const;
  void _internal_set_orderid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:TradeInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  double price_;
  ::PROTOBUF_NAMESPACE_ID::uint64 quantity_;
  ::PROTOBUF_NAMESPACE_ID::uint64 orderid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Trades_2eproto;
};
// -------------------------------------------------------------------

class Trade :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Trade) */ {
 public:
  Trade();
  virtual ~Trade();

  Trade(const Trade& from);
  Trade(Trade&& from) noexcept
    : Trade() {
    *this = ::std::move(from);
  }

  inline Trade& operator=(const Trade& from) {
    CopyFrom(from);
    return *this;
  }
  inline Trade& operator=(Trade&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Trade& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Trade* internal_default_instance() {
    return reinterpret_cast<const Trade*>(
               &_Trade_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Trade& a, Trade& b) {
    a.Swap(&b);
  }
  inline void Swap(Trade* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Trade* New() const final {
    return CreateMaybeMessage<Trade>(nullptr);
  }

  Trade* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Trade>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Trade& from);
  void MergeFrom(const Trade& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Trade* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Trade";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Trades_2eproto);
    return ::descriptor_table_Trades_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBidTradeFieldNumber = 1,
    kAskTradeFieldNumber = 2,
  };
  // .TradeInfo bidTrade = 1;
  bool has_bidtrade() const;
  private:
  bool _internal_has_bidtrade() const;
  public:
  void clear_bidtrade();
  const ::TradeInfo& bidtrade() const;
  ::TradeInfo* release_bidtrade();
  ::TradeInfo* mutable_bidtrade();
  void set_allocated_bidtrade(::TradeInfo* bidtrade);
  private:
  const ::TradeInfo& _internal_bidtrade() const;
  ::TradeInfo* _internal_mutable_bidtrade();
  public:

  // .TradeInfo askTrade = 2;
  bool has_asktrade() const;
  private:
  bool _internal_has_asktrade() const;
  public:
  void clear_asktrade();
  const ::TradeInfo& asktrade() const;
  ::TradeInfo* release_asktrade();
  ::TradeInfo* mutable_asktrade();
  void set_allocated_asktrade(::TradeInfo* asktrade);
  private:
  const ::TradeInfo& _internal_asktrade() const;
  ::TradeInfo* _internal_mutable_asktrade();
  public:

  // @@protoc_insertion_point(class_scope:Trade)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::TradeInfo* bidtrade_;
  ::TradeInfo* asktrade_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Trades_2eproto;
};
// -------------------------------------------------------------------

class Trades :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Trades) */ {
 public:
  Trades();
  virtual ~Trades();

  Trades(const Trades& from);
  Trades(Trades&& from) noexcept
    : Trades() {
    *this = ::std::move(from);
  }

  inline Trades& operator=(const Trades& from) {
    CopyFrom(from);
    return *this;
  }
  inline Trades& operator=(Trades&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Trades& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Trades* internal_default_instance() {
    return reinterpret_cast<const Trades*>(
               &_Trades_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Trades& a, Trades& b) {
    a.Swap(&b);
  }
  inline void Swap(Trades* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Trades* New() const final {
    return CreateMaybeMessage<Trades>(nullptr);
  }

  Trades* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Trades>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Trades& from);
  void MergeFrom(const Trades& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Trades* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Trades";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Trades_2eproto);
    return ::descriptor_table_Trades_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTradesFieldNumber = 1,
  };
  // repeated .Trade trades = 1;
  int trades_size() const;
  private:
  int _internal_trades_size() const;
  public:
  void clear_trades();
  ::Trade* mutable_trades(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Trade >*
      mutable_trades();
  private:
  const ::Trade& _internal_trades(int index) const;
  ::Trade* _internal_add_trades();
  public:
  const ::Trade& trades(int index) const;
  ::Trade* add_trades();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Trade >&
      trades() const;

  // @@protoc_insertion_point(class_scope:Trades)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Trade > trades_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Trades_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TradeInfo

// double price = 1;
inline void TradeInfo::clear_price() {
  price_ = 0;
}
inline double TradeInfo::_internal_price() const {
  return price_;
}
inline double TradeInfo::price() const {
  // @@protoc_insertion_point(field_get:TradeInfo.price)
  return _internal_price();
}
inline void TradeInfo::_internal_set_price(double value) {
  
  price_ = value;
}
inline void TradeInfo::set_price(double value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:TradeInfo.price)
}

// uint64 quantity = 2;
inline void TradeInfo::clear_quantity() {
  quantity_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TradeInfo::_internal_quantity() const {
  return quantity_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TradeInfo::quantity() const {
  // @@protoc_insertion_point(field_get:TradeInfo.quantity)
  return _internal_quantity();
}
inline void TradeInfo::_internal_set_quantity(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  quantity_ = value;
}
inline void TradeInfo::set_quantity(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_quantity(value);
  // @@protoc_insertion_point(field_set:TradeInfo.quantity)
}

// uint64 orderId = 3;
inline void TradeInfo::clear_orderid() {
  orderid_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TradeInfo::_internal_orderid() const {
  return orderid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TradeInfo::orderid() const {
  // @@protoc_insertion_point(field_get:TradeInfo.orderId)
  return _internal_orderid();
}
inline void TradeInfo::_internal_set_orderid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  orderid_ = value;
}
inline void TradeInfo::set_orderid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_orderid(value);
  // @@protoc_insertion_point(field_set:TradeInfo.orderId)
}

// -------------------------------------------------------------------

// Trade

// .TradeInfo bidTrade = 1;
inline bool Trade::_internal_has_bidtrade() const {
  return this != internal_default_instance() && bidtrade_ != nullptr;
}
inline bool Trade::has_bidtrade() const {
  return _internal_has_bidtrade();
}
inline void Trade::clear_bidtrade() {
  if (GetArenaNoVirtual() == nullptr && bidtrade_ != nullptr) {
    delete bidtrade_;
  }
  bidtrade_ = nullptr;
}
inline const ::TradeInfo& Trade::_internal_bidtrade() const {
  const ::TradeInfo* p = bidtrade_;
  return p != nullptr ? *p : *reinterpret_cast<const ::TradeInfo*>(
      &::_TradeInfo_default_instance_);
}
inline const ::TradeInfo& Trade::bidtrade() const {
  // @@protoc_insertion_point(field_get:Trade.bidTrade)
  return _internal_bidtrade();
}
inline ::TradeInfo* Trade::release_bidtrade() {
  // @@protoc_insertion_point(field_release:Trade.bidTrade)
  
  ::TradeInfo* temp = bidtrade_;
  bidtrade_ = nullptr;
  return temp;
}
inline ::TradeInfo* Trade::_internal_mutable_bidtrade() {
  
  if (bidtrade_ == nullptr) {
    auto* p = CreateMaybeMessage<::TradeInfo>(GetArenaNoVirtual());
    bidtrade_ = p;
  }
  return bidtrade_;
}
inline ::TradeInfo* Trade::mutable_bidtrade() {
  // @@protoc_insertion_point(field_mutable:Trade.bidTrade)
  return _internal_mutable_bidtrade();
}
inline void Trade::set_allocated_bidtrade(::TradeInfo* bidtrade) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete bidtrade_;
  }
  if (bidtrade) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      bidtrade = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bidtrade, submessage_arena);
    }
    
  } else {
    
  }
  bidtrade_ = bidtrade;
  // @@protoc_insertion_point(field_set_allocated:Trade.bidTrade)
}

// .TradeInfo askTrade = 2;
inline bool Trade::_internal_has_asktrade() const {
  return this != internal_default_instance() && asktrade_ != nullptr;
}
inline bool Trade::has_asktrade() const {
  return _internal_has_asktrade();
}
inline void Trade::clear_asktrade() {
  if (GetArenaNoVirtual() == nullptr && asktrade_ != nullptr) {
    delete asktrade_;
  }
  asktrade_ = nullptr;
}
inline const ::TradeInfo& Trade::_internal_asktrade() const {
  const ::TradeInfo* p = asktrade_;
  return p != nullptr ? *p : *reinterpret_cast<const ::TradeInfo*>(
      &::_TradeInfo_default_instance_);
}
inline const ::TradeInfo& Trade::asktrade() const {
  // @@protoc_insertion_point(field_get:Trade.askTrade)
  return _internal_asktrade();
}
inline ::TradeInfo* Trade::release_asktrade() {
  // @@protoc_insertion_point(field_release:Trade.askTrade)
  
  ::TradeInfo* temp = asktrade_;
  asktrade_ = nullptr;
  return temp;
}
inline ::TradeInfo* Trade::_internal_mutable_asktrade() {
  
  if (asktrade_ == nullptr) {
    auto* p = CreateMaybeMessage<::TradeInfo>(GetArenaNoVirtual());
    asktrade_ = p;
  }
  return asktrade_;
}
inline ::TradeInfo* Trade::mutable_asktrade() {
  // @@protoc_insertion_point(field_mutable:Trade.askTrade)
  return _internal_mutable_asktrade();
}
inline void Trade::set_allocated_asktrade(::TradeInfo* asktrade) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete asktrade_;
  }
  if (asktrade) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      asktrade = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, asktrade, submessage_arena);
    }
    
  } else {
    
  }
  asktrade_ = asktrade;
  // @@protoc_insertion_point(field_set_allocated:Trade.askTrade)
}

// -------------------------------------------------------------------

// Trades

// repeated .Trade trades = 1;
inline int Trades::_internal_trades_size() const {
  return trades_.size();
}
inline int Trades::trades_size() const {
  return _internal_trades_size();
}
inline void Trades::clear_trades() {
  trades_.Clear();
}
inline ::Trade* Trades::mutable_trades(int index) {
  // @@protoc_insertion_point(field_mutable:Trades.trades)
  return trades_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Trade >*
Trades::mutable_trades() {
  // @@protoc_insertion_point(field_mutable_list:Trades.trades)
  return &trades_;
}
inline const ::Trade& Trades::_internal_trades(int index) const {
  return trades_.Get(index);
}
inline const ::Trade& Trades::trades(int index) const {
  // @@protoc_insertion_point(field_get:Trades.trades)
  return _internal_trades(index);
}
inline ::Trade* Trades::_internal_add_trades() {
  return trades_.Add();
}
inline ::Trade* Trades::add_trades() {
  // @@protoc_insertion_point(field_add:Trades.trades)
  return _internal_add_trades();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Trade >&
Trades::trades() const {
  // @@protoc_insertion_point(field_list:Trades.trades)
  return trades_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Trades_2eproto
